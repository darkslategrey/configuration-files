;;-----------------------------------------------------------------------------
;; Global keyBindings
;;-----------------------------------------------------------------------------

(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-c\C-m" 'execute-extended-command)

(global-set-key [f1] 'find-tag)
(global-set-key [f2] 'pop-tag-mark)
(global-set-key [f3] 'show-subtree)
(global-set-key [f4] 'hide-subtree)
(global-set-key [f5] 'next-flymake-error)
(global-set-key [f6] 'flymake-start-syntax-check)

;; Go to binding
(global-set-key "\M-g" 'goto-line)

;; Smarter centering
(global-set-key [(control l)]  'centerer)

;; Default to regexp search
(global-set-key [(control s)] 'isearch-forward-regexp)
(global-set-key [(control r)] 'isearch-backward-regexp)

(custom-set-variables
 '(flymake-errline ((((class color)) (:background "LightPink" :foreground "black"))))
 '(flymake-warnline ((((class color)) (:background "LightBlue2" :foreground "black"))))
)

;;-----------------------------------------------------------------------------
;; Load Path
;;-----------------------------------------------------------------------------

;;load path set to folder ~/emacs for .el files
(setq load-path (cons "~/emacs/mmm-mode" (cons "~/emacs/color-theme" (cons "~/emacs" load-path))))
(setq load-path (cons "~/emacs/color-theme/themes" load-path))

;; bell gets really annoying 
(setq visible-bell t)
(setq ring-bell-function (lambda ()));get rid of bell completely

;;-----------------------------------------------------------------------------
;; Global Defaults
;;-----------------------------------------------------------------------------

;; Some better defaults
(fset 'yes-or-no-p 'y-or-n-p)           ;replace y-e-s by y
(setq inhibit-startup-message t)        ;no splash screen
(setq ls-lisp-dirs-first t)             ;display dirs first in dired
(setq x-select-enable-clipboard t);use system clipboard
(show-paren-mode 1);match parenthesis
(menu-bar-mode -1);hide menu-bar
(scroll-bar-mode -1);hide scroll-bar
(tool-bar-mode -1);hide tool-bar
(column-number-mode 1);show column number
(global-font-lock-mode 1);Color syntax highlighting
(icomplete-mode 1)
(auto-compression-mode 1) ; Use compressed files as if they were normal
(setq font-lock-maximum-decoration t);why not? 
(add-hook 'text-mode-hook 'auto-fill-mode)  ;auto-fill
(setq transient-mark-mode t);highlights selections
(setq comment-style 'plain)
(setq frame-title-format (list '("emacs ") '(buffer-file-name "%f" (dired-directory dired-directory "%b"))))
(tool-bar-mode 0)
(global-font-lock-mode t)
(setq font-lock-maximum-decoration t)
(interactive)

;;-----------------------------------------------------------------------------
;; Host Name (for conditional module loading / path settings)
;;-----------------------------------------------------------------------------

;; Split the system-name up into host and domain name.
(defvar host-name nil)
(defvar domain-name nil)
(let ((system-name (system-name)))
  (if (string-match "^\\([^.]+\\)\\.\\(.*\\)" system-name)
      ;; fully qualified system-name
      (setq host-name (match-string 1 system-name)
	        domain-name (match-string 2 system-name))
  ;; system-name is host-name
  (setq host-name system-name
	domain-name (getenv "DOMAINNAME"))))

;;-----------------------------------------------------------------------------
;; Smarter Tab Behavior
;;-----------------------------------------------------------------------------

(defun indent-or-expand (arg)
  "Either indent according to mode, or expand the word preceding
point."
  (interactive "*P")
  (if (and
       (or (bobp) (= ?w (char-syntax (char-before))))
       (or (eobp) (not (= ?w (char-syntax (char-after))))))
      (dabbrev-expand arg)
    (indent-according-to-mode)))

(defun my-tab-fix ()
  (local-set-key "\t" 'indent-or-expand))

(add-hook 'c-mode-hook          'my-tab-fix)
(add-hook 'sh-mode-hook         'my-tab-fix)
(add-hook 'emacs-lisp-mode-hook 'my-tab-fix)
(add-hook 'python-mode-hook     'my-tab-fix)
(add-hook 'java-mode-hook       'my-tab-fix)
(add-hook 'objc-mode-hook       'my-tab-fix)

;;-----------------------------------------------------------------------------
;; Major modes
;;-----------------------------------------------------------------------------

;;-----------------------------------------------------------------------------
;; Python mode
;;-----------------------------------------------------------------------------

(add-hook 'python-mode-hook '(lambda () (define-key python-mode-map "\C-m" 'newline-and-indent)))

(add-hook 'python-mode-hook '(lambda () (custom-set-variables
					 '(py-indent-offset 4)
					 '(tab-width 4)
					 '(py-smart-indentation nil))))

;; Outline mode
;; setup python mode
; add my customization
(add-hook 'python-mode-hook 'my-python-hook)
; this gets called by outline to deteremine the level. Just use the length of the whitespace
(defun py-outline-level ()
   (let (buffer-invisibility-spec)
     (save-excursion
       (skip-chars-forward "\t ")
       (current-column))))
; this get called after python mode is enabled
(defun my-python-hook ()
   ; outline uses this regexp to find headers. I match lines with indented "class"
   ; and "def" lines and lines with @ (attribute)
   (setq outline-regexp "[ \t]*\\(def\\|class\\) \\|[\t]*\\@[A-Za-z]+")
   ; enable our level computation
   (setq outline-level 'py-outline-level)
   ; turn on outline mode
   (outline-minor-mode t)
   ; initially hide all but the headers
   (hide-body)
   ; make paren matches visible
   (show-paren-mode 1)
)


;;-----------------------------------------------------------------------------
;; Java mode
;;-----------------------------------------------------------------------------
(add-hook 'java-mode-hook (lambda () (local-set-key [(return)] 'newline-and-indent) ))


;;-----------------------------------------------------------------------------
;; Erlang mode
;;-----------------------------------------------------------------------------

(when (string-equal host-name "nuance")
  (setq load-path (cons  "/sw/lib/erlang/lib/tools-2.6/emacs" load-path))
  (setq erlang-root-dir "/sw/")
  (setq exec-path (cons "/sw/bin" exec-path))
  (require 'erlang-start))

;;-----------------------------------------------------------------------------
;; ido - Better minibuffer completion
;;-----------------------------------------------------------------------------
(if (< emacs-major-version 22) ;newer version included in Emacs 22, that doesn't work with 21
    (load-library "ido-old")
  (require 'ido))
(ido-mode t)
(add-hook 'ido-define-mode-map-hook 'ido-my-keys)
(defun ido-my-keys ()
  (define-key ido-mode-map "\t" 'ido-complete)
  (define-key ido-mode-map "\C-t" 'ido-toggle-regexp) ; same as in isearch
  (define-key ido-mode-map "\C-d" 'ido-enter-dired)) ; cool

;;-----------------------------------------------------------------------------
;; Minor modes
;;-----------------------------------------------------------------------------

;; Line numbering - M-x linum
(require 'linum)

;; Line highlighting
(require 'highline)

;;-----------------------------------------------------------------------------
;; Indent whole buffer
;;-----------------------------------------------------------------------------

(defun iwb ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))

;;-----------------------------------------------------------------------------
;; Color theme
;;-----------------------------------------------------------------------------

(require 'color-theme)
(load-library "color-theme-cl-frame")
(load-library "color-theme-colorful-obsolescence")
(load-library "color-theme-library")

(defun load-dark-settings ()
  (interactive)
  (color-theme-colorful-obsolescence)
  (highline-mode))

(defun load-light-settings ()
  (interactive)
  (color-theme-calm-forest)
  (highline-mode))

(load-light-settings)

;;-----------------------------------------------------------------------------
;; Smarter Centering
;;-----------------------------------------------------------------------------

;; Centering code stolen from somewhere and restolen from 
;; http://www.chrislott.org/geek/emacs/dotemacs.html
;; centers the screen around a line...

(defun centerer ()
   "Repositions current line: once middle, twice top, thrice bottom"
   (interactive)
   (cond ((eq last-command 'centerer2)  ; 3 times pressed = bottom
	    (recenter -1))
	  ((eq last-command 'centerer1)  ; 2 times pressed = top
	     (recenter 0)
	       (setq this-command 'centerer2))
	   (t                             ; 1 time pressed = middle
	      (recenter)
	        (setq this-command 'centerer1))))


;;-----------------------------------------------------------------------------
;; Flymake - error checking as you type
;;-----------------------------------------------------------------------------

;; pyflakes... thanks again to chrism.

  (when (load "flymake" t) 
         (defun flymake-pyflakes-init () 
           (let* ((temp-file (flymake-init-create-temp-buffer-copy 
                              'flymake-create-temp-inplace)) 
              (local-file (file-relative-name 
                           temp-file 
                           (file-name-directory buffer-file-name)))) 
             (list "pyflakes" (list local-file)))) 

         (add-to-list 'flymake-allowed-file-name-masks 
                  '("\\.py\\'" flymake-pyflakes-init))) 

   (add-hook 'find-file-hook 'flymake-find-file-hook)

(load-library "flymake-cursor")

;;(when (load "flymake" t)
(defun flymake-pylint-init ()
  (let* ((temp-file (flymake-init-create-temp-buffer-copy
		     'flymake-create-temp-inplace))
	 (local-file (file-relative-name
		      temp-file
		      (file-name-directory buffer-file-name))))
    (list "epylint" (list local-file))))


(defun strict-flymake-enable ()
  (interactive)
  (delete 'flymake-allowed-file-name-masks 
	  '("\\.py\\'" flymake-pyflakes-init))
  (add-to-list 'flymake-allowed-file-name-masks
               '("\\.py\\'" flymake-pylint-init))
  (flymake-start-syntax-check))

(defun strict-flymake-disable ()
  (interactive)
  (delete 'flymake-allowed-file-name-masks 
	  '("\\.py\\'" flymake-pylint-init))
  (add-to-list 'flymake-allowed-file-name-masks 
	       '("\\.py\\'" flymake-pyflakes-init))
  (flymake-start-syntax-check)) 

(defun next-flymake-error ()
      (interactive)
      (let ((err-buf nil))
        (condition-case err
            (setq err-buf (next-error-find-buffer))
          (error))
        (if err-buf
            (next-error)
            (progn
              (flymake-goto-next-error)
              (let ((err (get-char-property (point) 'help-echo)))
                (when err
                  (message err)))))))

;;(add-hook 'find-file-hook 'flymake-find-file-hook)

;;-----------------------------------------------------------------------------
;; MMM modes (allows a buffer to use multiple major modes)
;;-----------------------------------------------------------------------------

;; MMM-Mode
(require 'mmm-auto)
(setq mmm-global-mode 'maybe)
(setq mmm-submode-decoration-level 0)

;;-----------------------------------------------------------------------------
;; Cheetah mode - mix of html-mode and a basic cheetah keyword highlighter
;;-----------------------------------------------------------------------------

(define-derived-mode cheetah-mode html-mode "Cheetah"
  (make-face 'cheetah-variable-face)
  (font-lock-add-keywords
   nil
   '(
     ("\\(#\\(from\\|else\\|else if\\|include\\|extends\\|set\\|def\\|import\\|for\\|if\\|end\\)+\\)\\>" 1 font-lock-type-face)
     ("\\(#\\(from\\|for\\|end\\)\\).*\\<\\(for\\|import\\|def\\|if\\|in\\)\\>" 3 font-lock-type-face)
     ("\\(##.*\\)\n" 1 font-lock-comment-face)
     ("\\(\\$\\(?:\\sw\\|}\\|{\\|\\s_\\)+\\)" 1 font-lock-variable-name-face))
   )
  (font-lock-mode 1)
  )

;;-----------------------------------------------------------------------------
;; Smart Cheetah (uses mmm for javascript, css)
;;-----------------------------------------------------------------------------

;; CSS-Mode
(autoload 'css-mode "css-mode")
(add-to-list 'auto-mode-alist '("\\.css\\'" . css-mode))
(setq cssm-indent-function #'cssm-c-style-indenter)
(setq cssm-indent-level '2)

;; javascript-generic-mode
(autoload 'javascript-mode "javascript" nil t)
(add-to-list 'auto-mode-alist '("\\.js\\'" . javascript-mode))

;; Set up an mmm group for fancy html editing
(mmm-add-group
 'fancy-cheetah
 '(
         (html-css-embedded
                :submode css-mode
                :face mmm-declaration-submode-face
                :front "<style\[^>\]*>"
                :back "</style>")
         (html-css-attribute
                :submode css-mode
                :face mmm-declaration-submode-face
                :front "\\bstyle=\\s-*\""
                :back "\"")
         (html-javascript-embedded
                :submode javascript-mode
                :face mmm-code-submode-face
                :front "<script\[^>\]*>"
                :back "</script>")
         (html-javascript-attribute
                :submode javascript-mode
                :face mmm-code-submode-face
                :front "\\bon\\w+=\\s-*\""
                :back "\"")
	 (python-chunks
	        :submode python-mode
		:face mmm-code-submode-face
		:front "#"
		:back "#")
	 (python-lines
	        :submode python-mode
		:face mmm-code-submode-face
		:front "#"
		:back "[^#]*\n")
   )
)

(setq auto-mode-alist (cons '( "\\.tmpl\\'" . cheetah-mode ) auto-mode-alist ))
(add-to-list 'mmm-mode-ext-classes-alist '(cheetah-mode nil fancy-cheetah))

